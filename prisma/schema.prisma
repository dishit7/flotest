 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
model Profile {
  id        String  @id @db.Uuid  
  email     String  @unique
  fullName  String? @map("full_name")
  avatarUrl String? @map("avatar_url")
  
  googleAccessToken  String? @map("google_access_token")
  googleRefreshToken String? @map("google_refresh_token")
  
  gmailHistoryId       String?   @map("gmail_history_id")
  labelsCreated        Boolean   @default(false) @map("labels_created")
  initialSyncCompleted Boolean   @default(false) @map("initial_sync_completed")
  lastSyncedAt         DateTime? @map("last_synced_at")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  settings      UserSettings?
  emailMetadata EmailMetadata[]
   
  @@map("profiles")
}
 
model UserSettings {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @unique @map("user_id") @db.Uuid
  
  autoCategorizeEnabled Boolean @default(true) @map("auto_categorize_enabled")
  autoDraftEnabled      Boolean @default(false) @map("auto_draft_enabled")
  autoLabelEnabled      Boolean @default(true) @map("auto_label_enabled")
  maxEmailsToProcess    Int     @default(100) @map("max_emails_to_process")
  
  theme         String @default("light")  
  itemsPerPage  Int    @default(50) @map("items_per_page")
  
  draftSettings Json? @map("draft_settings")
   
  labels Json? @map("labels")
  labelCustomization Json? @map("label_customization")
 
   
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  profile Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}

 
model EmailMetadata {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @map("user_id") @db.Uuid
  
  gmailMessageId String @map("gmail_message_id")
  gmailThreadId  String @map("gmail_thread_id")
  
  subject     String
  senderEmail String  @map("sender_email")
  senderName  String? @map("sender_name")
  snippet     String?  
  
  assignedLabelIds Json?    @map("assigned_label_ids")
  assignedBy       String?  @map("assigned_by")
  confidenceScore  Decimal? @map("confidence_score") @db.Decimal(3, 2)
  labelAssignments Json?    @map("label_assignments")
  
  hasDraftGenerated Boolean   @default(false) @map("has_draft_generated")
  draftId           String?   @map("draft_id")  
  draftGeneratedAt  DateTime? @map("draft_generated_at")
  
  isRead     Boolean @default(false) @map("is_read")
  isStarred  Boolean @default(false) @map("is_starred")
  isArchived Boolean @default(false) @map("is_archived")
  
  receivedAt  DateTime @map("received_at")
  processedAt DateTime @default(now()) @map("processed_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  profile Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
   
  @@unique([userId, gmailMessageId])
  @@index([userId])
  @@index([gmailMessageId])
  @@index([userId, assignedBy])
  @@index([hasDraftGenerated])
  @@map("email_metadata")
}
  
 
 

